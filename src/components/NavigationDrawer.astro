---
// Navigation Drawer Component for Mobile Navigation
---

<nav-drawer class="navigation-drawer">
  <!-- Mobile menu button -->
  <md-icon-button 
    class="menu-toggle"
    aria-label="Open navigation menu"
    aria-expanded="false"
    title="Open navigation menu"
  >
    <md-icon>menu</md-icon>
  </md-icon-button>

  <!-- Navigation drawer -->
  <div class="drawer-backdrop" aria-hidden="true"></div>
  <aside class="drawer" role="navigation" aria-label="Main navigation">
    <div class="drawer-header">
      <h2>Navigation</h2>
      <md-icon-button 
        class="close-button"
        aria-label="Close navigation menu"
        title="Close navigation menu"
      >
        <md-icon>close</md-icon>
      </md-icon-button>
    </div>
    
    <div class="drawer-content">
      <nav class="drawer-nav">
        <md-list class="nav-list">
          <md-list-item href="/" type="link">
            <md-icon slot="start">home</md-icon>
            <span slot="headline">Home</span>
          </md-list-item>
          
          <md-list-item href="/blog" type="link">
            <md-icon slot="start">article</md-icon>
            <span slot="headline">Blog</span>
          </md-list-item>
          
          <md-list-item href="/about" type="link">
            <md-icon slot="start">person</md-icon>
            <span slot="headline">About</span>
          </md-list-item>
          
          {import.meta.env.DEV && (
            <md-list-item href="/components" type="link">
              <md-icon slot="start">palette</md-icon>
              <span slot="headline">Style Guide</span>
            </md-list-item>
          )}
        </md-list>
      </nav>
      
      <div class="drawer-footer">
        <div class="social-links">
          <a href="https://www.linkedin.com/in/danielwestfall/" target="_blank" aria-label="LinkedIn profile">
            <md-icon-button>
              <svg slot="icon" viewBox="0 0 16 16" aria-hidden="true" width="24" height="24">
                <path fill="currentColor" d="M13.633 13.633H11.08V9.89c0-.891-.016-2.037-1.24-2.037-1.242 0-1.434 1.074-1.434 1.973v3.807H5.857V5.996h2.46v1.12h.034c.34-.644 1.17-1.32 2.428-1.32 2.597 0 3.075 1.71 3.075 3.935v4.59zM3.367 4.87c-.856 0-1.549-.694-1.549-1.548s.693-1.548 1.549-1.548c.854 0 1.547.694 1.547 1.548s-.693 1.548-1.547 1.548zM4.609 13.633H2.125V5.996h2.484v7.637zM14.938 0H1.062C.475 0 0 .475 0 1.062v13.876C0 15.525.475 16 1.062 16h13.876c.587 0 1.062-.475 1.062-1.062V1.062C16 .475 15.525 0 14.938 0z"></path>
              </svg>
            </md-icon-button>
          </a>

          <a href="https://github.com/danielwestfall" target="_blank" aria-label="GitHub profile">
            <md-icon-button>
              <svg slot="icon" viewBox="0 0 16 16" aria-hidden="true" width="24" height="24">
                <path fill="currentColor" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"></path>
              </svg>
            </md-icon-button>
          </a>

          <a href="mailto:daniel@codea11y.dev" target="_blank" aria-label="Send email">
            <md-icon-button>
              <svg slot="icon" viewBox="0 0 16 16" aria-hidden="true" width="24" height="24">
                <path fill="currentColor" d="M14.5 2h-13A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2Zm-1.88 1L8 7.37 3.38 3h9.24ZM14 12.5a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-8L7.6 8.6a.5.5 0 0 0 .8 0l5.6-4.1v8Z"></path>
              </svg>
            </md-icon-button>
          </a>
        </div>
      </div>
    </div>
  </aside>
</nav-drawer>

<style>
  .navigation-drawer {
    display: none;
  }

  /* Menu toggle button */
  .menu-toggle {
    --md-icon-button-icon-color: var(--md-sys-color-on-surface);
    --md-icon-button-hover-icon-color: var(--md-sys-color-primary);
    --md-icon-button-pressed-icon-color: var(--md-sys-color-primary);
  }

  /* Drawer backdrop */
  .drawer-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.32);
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  .drawer-backdrop.open {
    opacity: 1;
    visibility: visible;
  }

  /* Navigation drawer */
  .drawer {
    position: fixed;
    top: 0;
    left: 0;
    width: min(280px, calc(100vw - 40px));
    height: 100%;
    background-color: var(--md-sys-color-surface-container);
    border-radius: 0 16px 16px 0;
    z-index: 1001;
    transform: translateX(-100%);
    transition: transform 0.3s cubic-bezier(0.3, 0, 0, 1);
    display: flex;
    flex-direction: column;
    box-shadow: var(--md-sys-elevation-shadow-3);
  }

  .drawer.open {
    transform: translateX(0);
  }

  /* Drawer header */
  .drawer-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
    border-bottom: 1px solid var(--md-sys-color-outline-variant);
    background-color: var(--md-sys-color-surface);
  }

  .drawer-header h2 {
    margin: 0;
    color: var(--md-sys-color-on-surface);
    font-size: 1.25rem;
    font-weight: 500;
  }

  .close-button {
    --md-icon-button-icon-color: var(--md-sys-color-on-surface);
    --md-icon-button-hover-icon-color: var(--md-sys-color-error);
  }

  /* Drawer content */
  .drawer-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    padding: 1rem 0;
  }

  .drawer-nav {
    flex: 1;
  }

  .nav-list {
    --md-list-item-list-item-container-color: transparent;
    --md-list-item-hover-list-item-container-color: var(--md-sys-color-surface-variant);
    --md-list-item-pressed-list-item-container-color: var(--md-sys-color-surface-variant);
    --md-list-item-list-item-label-text-color: var(--md-sys-color-on-surface);
    --md-list-item-hover-list-item-label-text-color: var(--md-sys-color-primary);
    --md-list-item-pressed-list-item-label-text-color: var(--md-sys-color-primary);
    --md-list-item-list-item-leading-icon-color: var(--md-sys-color-on-surface-variant);
    --md-list-item-hover-list-item-leading-icon-color: var(--md-sys-color-primary);
    --md-list-item-pressed-list-item-leading-icon-color: var(--md-sys-color-primary);
  }

  /* Drawer footer */
  .drawer-footer {
    padding: 1rem;
    border-top: 1px solid var(--md-sys-color-outline-variant);
  }

  .social-links {
    display: flex;
    justify-content: center;
    gap: 0.5rem;
  }

  .social-links a {
    color: var(--md-sys-color-on-surface-variant);
    transition: color 0.3s ease;
  }

  .social-links a:hover {
    color: var(--md-sys-color-primary);
  }

  .social-links md-icon-button {
    --md-icon-button-icon-color: var(--md-sys-color-on-surface-variant);
    --md-icon-button-hover-icon-color: var(--md-sys-color-primary);
    --md-icon-button-pressed-icon-color: var(--md-sys-color-primary);
  }

  /* Show navigation drawer on mobile */
  @media (max-width: 720px) {
    .navigation-drawer {
      display: block;
    }
  }

  /* Smaller drawer on very small screens */
  @media (max-width: 375px) {
    .drawer {
      width: min(260px, calc(100vw - 40px));
    }
  }
</style>

<script>
  class NavigationDrawer extends HTMLElement {
    isOpen: boolean;
    menuToggle: any;
    closeButton: any;
    drawer: any;
    backdrop: any;
    navItems: any;
    tabKeyHandler: any;

    constructor() {
      super();
      this.isOpen = false;
      this.init();
    }

    init() {
      this.menuToggle = this.querySelector('.menu-toggle');
      this.closeButton = this.querySelector('.close-button');
      this.drawer = this.querySelector('.drawer');
      this.backdrop = this.querySelector('.drawer-backdrop');
      this.navItems = this.querySelectorAll('md-list-item[href]');

      this.bindEvents();
    }

    bindEvents() {
      // Open drawer
      this.menuToggle?.addEventListener('click', () => this.openDrawer());
      
      // Close drawer
      this.closeButton?.addEventListener('click', () => this.closeDrawer());
      this.backdrop?.addEventListener('click', () => this.closeDrawer());
      
      // Close on navigation
      this.navItems.forEach((item: any) => {
        item.addEventListener('click', () => {
          // Small delay to allow navigation to start
          setTimeout(() => this.closeDrawer(), 100);
        });
      });

      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOpen) {
          this.closeDrawer();
        }
      });

      // Handle focus management
      this.drawer?.addEventListener('transitionend', () => {
        if (this.isOpen) {
          // Focus first navigation item when drawer opens
          const firstNavItem = this.navItems[0];
          if (firstNavItem) {
            firstNavItem.focus();
          }
        }
      });
    }

    openDrawer() {
      this.isOpen = true;
      this.drawer?.classList.add('open');
      this.backdrop?.classList.add('open');
      
      // Update ARIA attributes
      this.menuToggle?.setAttribute('aria-expanded', 'true');
      this.menuToggle?.setAttribute('aria-label', 'Close navigation menu');
      
      // Prevent body scroll
      document.body.style.overflow = 'hidden';
      
      // Trap focus in drawer
      this.trapFocus();
    }

    closeDrawer() {
      this.isOpen = false;
      this.drawer?.classList.remove('open');
      this.backdrop?.classList.remove('open');
      
      // Update ARIA attributes
      this.menuToggle?.setAttribute('aria-expanded', 'false');
      this.menuToggle?.setAttribute('aria-label', 'Open navigation menu');
      
      // Restore body scroll
      document.body.style.overflow = '';
      
      // Return focus to menu toggle
      this.menuToggle?.focus();
    }

    trapFocus() {
      const focusableElements = this.drawer?.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );
      
      if (!focusableElements || focusableElements.length === 0) return;
      
      const firstElement = focusableElements[0];
      const lastElement = focusableElements[focusableElements.length - 1];

      const handleTabKey = (e: any) => {
        if (e.key !== 'Tab') return;

        if (e.shiftKey) {
          if (document.activeElement === firstElement) {
            e.preventDefault();
            lastElement.focus();
          }
        } else {
          if (document.activeElement === lastElement) {
            e.preventDefault();
            firstElement.focus();
          }
        }
      };

      // Add event listener for this drawer instance
      if (this.isOpen) {
        document.addEventListener('keydown', handleTabKey);
        
        // Store reference to remove later
        this.tabKeyHandler = handleTabKey;
      }
    }

    disconnectedCallback() {
      // Cleanup when component is removed
      if (this.tabKeyHandler) {
        document.removeEventListener('keydown', this.tabKeyHandler);
      }
      document.body.style.overflow = '';
    }
  }

  // Define the custom element
  customElements.define('nav-drawer', NavigationDrawer);
</script>