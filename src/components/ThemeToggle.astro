---
// Theme Toggle Component
---

<div class="theme-toggle">
  <span class="theme-label">üåô</span>
  <md-switch 
    id="theme-switch" 
    aria-label="Toggle dark mode"
    role="switch"
  ></md-switch>
  <span class="theme-label">‚òÄÔ∏è</span>
</div>

<script>
  class ThemeManager {
    constructor() {
      this.init();
    }

    init() {
      // Get the switch element
      this.themeSwitch = document.getElementById('theme-switch');
      
      // Detect system preference
      this.systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      // Get stored preference or use system preference
      const storedTheme = localStorage.getItem('theme');
      const initialTheme = storedTheme || (this.systemPrefersDark ? 'dark' : 'light');
      
      // Set initial theme
      this.setTheme(initialTheme);
      
      // Update switch state
      this.themeSwitch.selected = initialTheme === 'dark';
      
      // Listen for switch changes
      this.themeSwitch.addEventListener('change', (e) => {
        const newTheme = e.target.selected ? 'dark' : 'light';
        this.setTheme(newTheme);
        localStorage.setItem('theme', newTheme);
      });
      
      // Listen for system theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        // Only update if user hasn't set a preference
        if (!localStorage.getItem('theme')) {
          const newTheme = e.matches ? 'dark' : 'light';
          this.setTheme(newTheme);
          this.themeSwitch.selected = newTheme === 'dark';
        }
      });
    }

    setTheme(theme) {
      document.documentElement.setAttribute('data-theme', theme);
      
      // Also update the color-scheme for better browser integration
      document.documentElement.style.colorScheme = theme;
      
      // Update meta theme-color for mobile browsers
      let metaThemeColor = document.querySelector('meta[name="theme-color"]');
      if (!metaThemeColor) {
        metaThemeColor = document.createElement('meta');
        metaThemeColor.name = 'theme-color';
        document.head.appendChild(metaThemeColor);
      }
      
      // Set theme color based on Material Design tokens
      const themeColor = theme === 'dark' ? '#141316' : '#fefbff';
      metaThemeColor.content = themeColor;
    }
  }

  // Initialize theme manager when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ThemeManager());
  } else {
    new ThemeManager();
  }
</script>

<style>
  .theme-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.25rem;
  }
  
  .theme-label {
    font-size: 1.2rem;
    opacity: 0.7;
    transition: opacity 0.2s ease;
  }
  
  md-switch {
    --md-switch-selected-track-color: var(--md-sys-color-primary);
    --md-switch-selected-handle-color: var(--md-sys-color-on-primary);
    --md-switch-unselected-track-color: var(--md-sys-color-outline);
    --md-switch-unselected-handle-color: var(--md-sys-color-outline);
  }
  
  .theme-toggle:hover .theme-label {
    opacity: 1;
  }
  
  @media (max-width: 480px) {
    .theme-toggle {
      gap: 0.25rem;
    }
    
    .theme-label {
      font-size: 1rem;
    }
  }
</style>